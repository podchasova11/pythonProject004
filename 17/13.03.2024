import allure
import pytest
from pages.Elements.TableTradingInstrumentsBuyButton import TableTradingInstrumentsBuyButton
from pages.Elements.TableTradingInstrumentsSellButton import TableTradingInstrumentsSellButton
from pages.common import Common
from tests.build_dynamic_arg import build_dynamic_arg_v4
from pages.Menu.menu import MenuSection
from pages.conditions import Conditions
from src.src import CapitalComPageSrc
from pages.Elements.TradeCFDBlockStartTradingNowButton import TradeCFDBlockStartTradingNowButton

count = 1


@pytest.mark.us_01_04
class TestIndices:
    page_conditions = None

    @allure.step("Start test of button [Start Trading Now] on Block 'Trade Indices CFDs'")
    @pytest.mark.test_001
    def test_001_block_trade_indices_cfds_start_trading_now_button(
            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):
        """
        Check: Button [Start Trading Now]
        Language: All. License: All,except FCA.
        """
        bid = build_dynamic_arg_v4(
            d, worker_id, cur_language, cur_country, cur_role,
            "01.04", "Market > Menu item [Indices]",
            ".00_001", "Testing button [Start Trading Now] on Block 'Trade Indices CFDs'")

        Common().skip_if_eng_lang_and_fca_license(cur_language, cur_country)
        Common().check_country_in_list_and_skip_if_present(cur_country,["gb"])

        page_conditions = Conditions(d, "")
        link = page_conditions.preconditions(
            d, CapitalComPageSrc.URL, "", cur_language, cur_country, cur_role, cur_login, cur_password)

        page_menu = MenuSection(d, link)
        page_menu.move_focus_to_markets_menu(d, cur_language, cur_country)
        cur_page_url = page_menu.sub_menu_indices_move_focus_click(d, cur_language)

        test_element = TradeCFDBlockStartTradingNowButton(d, cur_page_url, bid)
        test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_page_url)

    @allure.step("Start test of button [Sell] on table Widget 'Trading instrument'")
    @pytest.mark.test_002
    def test_002_widget_trading_instrument_sell_button(
                self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):
        """
        Check: Button [Sell]
        Language: All. License: All,except FCA.
        """
        bid = build_dynamic_arg_v4(
            d, worker_id, cur_language, cur_country, cur_role,
            "01.04", "Market > Menu item [Indices]",
            ".00_002", "Testing button [Sell] on table Widget 'Trading instrument'")
        #  ".00_002", "Testing button [numeric values] column 'Sell' on Widget 'Trading instrument'")

        Common().skip_if_eng_lang_and_fca_license(cur_language, cur_country)
        Common().check_country_in_list_and_skip_if_present(cur_country,["gb"])

        page_conditions = Conditions(d, "")
        link = page_conditions.preconditions(
            d, CapitalComPageSrc.URL, "", cur_language, cur_country, cur_role, cur_login, cur_password)

        page_menu = MenuSection(d, link)
        page_menu.move_focus_to_markets_menu(d, cur_language, cur_country)
        cur_page_url = page_menu.sub_menu_indices_move_focus_click(d, cur_language)
        test_element = TableTradingInstrumentsSellButton(d, cur_page_url, bid)
        test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_page_url)

    @allure.step("Start test of button [Buy] on table Widget 'Trading instrument'")
    @pytest.mark.test_003
    def test_003_widget_trading_instrument_buy_button(
            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password, cur_sorting):
        """
        Check: Button [Buy]
        Language: All. License: All,except FCA.
        Role: All. Sorting: All
        """
        bid = build_dynamic_arg_v4(
            d, worker_id, cur_language, cur_country, cur_role,
            "01.04", "Market > Menu item [Indices]",
            ".00_003", f"Testing button [Buy] on table Widget 'Trading instrument' '{cur_sorting}' sorting")

        Common().skip_if_eng_lang_and_fca_license(cur_language, cur_country)
        Common().check_country_in_list_and_skip_if_present(cur_country, ["gb"])

        page_conditions = Conditions(d, "")
        link = page_conditions.preconditions(
            d, CapitalComPageSrc.URL, "", cur_language, cur_country, cur_role, cur_login, cur_password)

        page_menu = MenuSection(d, link)
        page_menu.move_focus_to_markets_menu(d, cur_language, cur_country)
        cur_page_url = page_menu.sub_menu_indices_move_focus_click(d, cur_language)

        test_element = TableTradingInstrumentsBuyButton(d, cur_page_url, bid)
        test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_page_url, cur_sorting)

    @allure.step("Start test_01.03_03 button [Buy] in Widget 'Trading instrument'")
    @pytest.mark.test_03
    def test_03_buy_trading_instrument(
            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password, sorting):
        bid = build_dynamic_arg_v4(
            d, worker_id, cur_language, cur_country, cur_role,
            "01.03", "Markets > Menu item [Forex]",
            ".00_003", "Testing button [Buy]")

        Common().check_country_in_list_and_skip_if_present(cur_country, ["gb"])
        Common().skip_if_eng_lang_and_fca_license(cur_language, cur_country)
        Common().check_language_in_list_and_skip_if_not_present(
            cur_language, ["", "ar", "de", "el", "es", "fr", "it", "hu", "nl", "pl", "ro", "ru", "cn", "zh"])

        page_conditions = Conditions(d, "")
        link = page_conditions.preconditions(
            d, CapitalComPageSrc.URL, "", cur_language, cur_country, cur_role, cur_login, cur_password)

        menu = MenuSection(d, link)
        cur_item_link = menu.open_forex_markets_menu(d, cur_language, cur_country, link)

        test_element = TableTradingInstrumentsBuyButton(d, cur_item_link, bid)
        test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_item_link, cur_sort)


def cur_country(request):
    """Fixture"""
    # проверка аргументов командной строки
    if request.config.getoption("country"):
        country = request.config.getoption("country")
    else:
        country = request.param
    print(f"Current country of trading - {country}")


##################################################


"""
-*- coding: utf-8 -*-
@Time    : 2024/10/03 12:43
@Author  : podchasova11
"""
import pytest
import random


# @pytest.fixture(
#     scope="function",
#     params=[
#         "Most traded",
#         "Top risers",
#         "Top fallers",
#         "Most volatile"
#     ],
# )
# def sorting(request):
#     """Fixture"""
#     print(f"\n\n\nCurrent sorting - {request.param}")
#     return request.param


@pytest.fixture(scope="function")
def sorting(request):
    """Fixture"""
    options = [
        {"sorting": "Most traded"},
        {"sorting": "Top risers"},
        {"sorting": "Top fallers"},
        {"sorting": "Most volatile"}
    ]
    chosen_options = random.sample(options, 2)
    for option in chosen_options:
        print(f"\n\n\nCurrent sorting - {option['sorting']}")
        request.cls.sorting_item = f"Current sorting - {option['sorting']}"
        yield request.param

###########################################################################################


"""
-*- coding: utf-8 -*-
@Time    : 2023/03/06 11:30
@Author  : podchasova11
"""
import random
from datetime import datetime

import pytest
import allure
from selenium.webdriver import ActionChains

from pages.Signup_login.signup_login import SignupLogin
from pages.base_page import BasePage
from pages.Elements.testing_elements_locators import ButtonSellOnTableTradingInstrumentsLocators
from pages.Elements.AssertClass import AssertClass


class TableTradingInstrumentsSellButton(BasePage):

    @allure.step(f'{datetime.now()}   Start Full test [Sell] button on Table Widget Trading Instruments')
    def full_test_with_tpi(self, d, cur_language, cur_country, cur_role, cur_item_link):
        qty_rnd = 2  # Тестируем два случайных инструмента
        num_item = self.arrange_(cur_item_link)
        random_indexes = random.sample(range(0, num_item), qty_rnd)
        print(f"\n{datetime.now()}   Random indexes = {random_indexes}")

        for i, index in enumerate(random_indexes):

            print(f"\n{datetime.now()}   Testing Table Widget Trading Instruments {i + 1} random element with {index} index")
            trade_instrument = self.element_click(index)
            if not trade_instrument:
                pytest.fail("Testing element is not clicked")

            check_element = AssertClass(d, cur_item_link, self.bid)
            match cur_role:
                case "NoReg":
                    check_element.assert_signup(d, cur_language, cur_item_link)
                case "NoAuth":
                    check_element.assert_login(d, cur_language, cur_item_link)
                case "Auth":
                    check_element.assert_trading_platform_v4(d, cur_item_link, False, True, trade_instrument)

    def arrange_(self, cur_item_link):
        print(f"\n{datetime.now()}   1. Arrange_v0")

        if not self.current_page_is(cur_item_link):
            self.link = cur_item_link
            self.open_page()

        print(f"{datetime.now()}   TABLE_TRADING_INSTRUMENTS is present? =>")
        item_list = self.driver.find_elements(*ButtonSellOnTableTradingInstrumentsLocators.TABLE_TRADING_INSTRUMENTS_LIST)
        num_item = len(item_list)
        if num_item == 0:
            print(f"{datetime.now()}   => TABLE_TRADING_INSTRUMENTS is not present on this page")
            pytest.skip("Checking element is not on this page")
        print(f"{datetime.now()}   => TABLE_TRADING_INSTRUMENTS is present on this page")
        print(f"{datetime.now()}   => Found {num_item} elements in TABLE_TRADING_INSTRUMENTS")

        print(f"{datetime.now()}   Most Table Widget Trading Instruments is scroll =>")
        self.driver.execute_script(
            'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});', item_list[0])
        print(f"{datetime.now()}   => Most Table Widget Trading Instruments is scrolled into screen center")

        # возвращаем количество элементов в Most Trade block
        return num_item

    @allure.step('Click Sell button on Table Widget Trading Instruments')
    def element_click(self, random_index):
        print(f"\n{datetime.now()}   2. Act_v0")

        check_popup = SignupLogin(self.driver, self.link)
        check_popup.check_popup_signup_form()
        del check_popup

        table_trading_instrument_list = self.driver.find_elements(*ButtonSellOnTableTradingInstrumentsLocators.TABLE_TRADING_INSTRUMENTS_NAME_LIST)
        if len(table_trading_instrument_list) == 0:
            pytest.fail("Problem! List of instruments is empty.")
        instrument_item = table_trading_instrument_list[random_index]
        instrument_title = instrument_item.get_attribute('title')

        item_list = self.driver.find_elements(*ButtonSellOnTableTradingInstrumentsLocators.TABLE_TRADING_INSTRUMENTS_LIST)
        element = item_list[random_index]

        print(f"{datetime.now()}   Selected Sell button on Table Widget Trading Instruments is scroll =>")
        self.driver.execute_script(
            'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});', element)

        print(f"{datetime.now()}   Selected Sell button click for '{instrument_title}' trading instrument =>")

        ActionChains(self.driver) \
            .pause(0.5) \
            .move_to_element(element) \
            .perform()

        if not self.element_is_clickable(element, 3):
            return ""

        ActionChains(self.driver) \
            .click() \
            .perform()
        print(f"{datetime.now()}   => Selected Sell button clicked!")

        return instrument_title  # возвращаем название торгового инструмента

    @allure.step(f"{datetime.now()}.   Click 'Risk-management guide' menu item.")
    def sub_menu_risk_management_guide_move_focus_click(self, d, test_language):
        sub_menu = list()
        match test_language:
            case "": sub_menu = d.find_elements(*MenuUS11RiskManagement.SUB_MENU_EN_RISK_MANAGEMENT)

        if len(sub_menu) == 0:
            pytest.fail(f"Bug # ??? For test language '{test_language}' "
                        f"the page \"Learn to trade->Risk-management guide\" doesn't exist on production")

        ActionChains(d) \
            .move_to_element(sub_menu[0]) \
            .pause(0.5) \
            .click() \
            .perform()
        print(f"\n\n{datetime.now()}   => Risk-management guide menu item clicked")

        del sub_menu
        return d.current_url


#######################################################################################################


import random
from datetime import datetime

import pytest
import allure
from selenium.webdriver import ActionChains

from pages.Signup_login.signup_login import SignupLogin
from pages.base_page import BasePage
from pages.Elements.testing_elements_locators import ButtonSellOnTableTradingInstrumentsLocators
from pages.Elements.AssertClass import AssertClass


class TableTradingInstrumentsSellButton(BasePage):

    @allure.step(f'{datetime.now()}   Start Full test [Sell] button on Table Widget Trading Instruments')
    def full_test_with_tpi(self, d, cur_language, cur_country, cur_role, cur_item_link):
        qty_rnd = 2  # Тестируем два случайных инструмента
        num_item = self.arrange_(cur_item_link)
        random_indexes = random.sample(range(0, num_item), qty_rnd)
        print(f"\n{datetime.now()}   Random indexes = {random_indexes}")

        for i, index in enumerate(random_indexes):

            print(f"\n{datetime.now()}   Testing Table Widget Trading Instruments {i + 1} random element with {index} index")
            trade_instrument = self.element_click(index)
            if not trade_instrument:
                pytest.fail("Testing element is not clicked")

            check_element = AssertClass(d, cur_item_link, self.bid)
            match cur_role:
                case "NoReg":
                    check_element.assert_signup(d, cur_language, cur_item_link)
                case "NoAuth":
                    check_element.assert_login(d, cur_language, cur_item_link)
                case "Auth":
                    check_element.assert_trading_platform_v4(d, cur_item_link, False, True, trade_instrument)

    def arrange_(self, cur_item_link):
        print(f"\n{datetime.now()}   1. Arrange_v0")

        if not self.current_page_is(cur_item_link):
            self.link = cur_item_link
            self.open_page()

        print(f"{datetime.now()}   TABLE_TRADING_INSTRUMENTS is present? =>")
        item_list = self.driver.find_elements(*ButtonSellOnTableTradingInstrumentsLocators.TABLE_TRADING_INSTRUMENTS_LIST)
        num_item = len(item_list)
        if num_item == 0:
            print(f"{datetime.now()}   => TABLE_TRADING_INSTRUMENTS is not present on this page")
            pytest.skip("Checking element is not on this page")
        print(f"{datetime.now()}   => TABLE_TRADING_INSTRUMENTS is present on this page")
        print(f"{datetime.now()}   => Found {num_item} elements in TABLE_TRADING_INSTRUMENTS")

        print(f"{datetime.now()}   Most Table Widget Trading Instruments is scroll =>")
        self.driver.execute_script(
            'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});', item_list[0])
        print(f"{datetime.now()}   => Most Table Widget Trading Instruments is scrolled into screen center")

        # возвращаем количество элементов в Most Trade block
        return num_item

    @allure.step('Click Sell button on Table Widget Trading Instruments')
    def element_click(self, random_index):
        print(f"\n{datetime.now()}   2. Act_v0")

        check_popup = SignupLogin(self.driver, self.link)
        check_popup.check_popup_signup_form()
        del check_popup

        table_trading_instrument_list = self.driver.find_elements(*ButtonSellOnTableTradingInstrumentsLocators.TABLE_TRADING_INSTRUMENTS_NAME_LIST)
        if len(table_trading_instrument_list) == 0:
            pytest.fail("Problem! List of instruments is empty.")
        instrument_item = table_trading_instrument_list[random_index]
        instrument_title = instrument_item.get_attribute('title')

        item_list = self.driver.find_elements(*ButtonSellOnTableTradingInstrumentsLocators.TABLE_TRADING_INSTRUMENTS_LIST)
        element = item_list[random_index]

        print(f"{datetime.now()}   Selected Sell button on Table Widget Trading Instruments is scroll =>")
        self.driver.execute_script(
            'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});', element)

        print(f"{datetime.now()}   Selected Sell button click for '{instrument_title}' trading instrument =>")

        ActionChains(self.driver) \
            .pause(0.5) \
            .move_to_element(element) \
            .perform()

        if not self.element_is_clickable(element, 3):
            return ""

        ActionChains(self.driver) \
            .click() \
            .perform()
        print(f"{datetime.now()}   => Selected Sell button clicked!")

        return instrument_title  # возвращаем название торгового инструмента

    @allure.step(f"{datetime.now()}.   Click 'Risk-management guide' menu item.")
    def sub_menu_risk_management_guide_move_focus_click(self, d, test_language):
        sub_menu = list()
        match test_language:
            case "": sub_menu = d.find_elements(*MenuUS11RiskManagement.SUB_MENU_EN_RISK_MANAGEMENT)

        if len(sub_menu) == 0:
            pytest.fail(f"Bug # ??? For test language '{test_language}' "
                        f"the page \"Learn to trade->Risk-management guide\" doesn't exist on production")

        ActionChains(d) \
            .move_to_element(sub_menu[0]) \
            .pause(0.5) \
            .click() \
            .perform()
        print(f"\n\n{datetime.now()}   => Risk-management guide menu item clicked")

        del sub_menu
        return d.current_url


