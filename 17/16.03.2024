

# """
# -*- coding: utf-8 -*-
# @Time    : 2023/03/06 11:30
# @Author  : podchasova11
# """
#
# import random
# from datetime import datetime
#
# import pytest
# import allure
# from selenium.common import ElementNotInteractableException, ElementClickInterceptedException
# from selenium.webdriver import ActionChains
#
# from pages.Signup_login.signup_login import SignupLogin
# from pages.base_page import BasePage
# from pages.Elements.testing_elements_locators import ButtonSellOnTableTradingInstrumentsLocators, \
#     ItemSortDropdownLocators
# from pages.Elements.AssertClass import AssertClass
#
#
# class TableTradingInstrumentsSellButton(BasePage):
#
    def __init__(self, browser, link, bid):
        # self.item_sorting = None
        # self.sorting_locator = None
        # self.current_sorting = None
        #
        # self.instruments_locator = None
        # self.instruments_list = None
        # self.cur_instrument = None
        #
        # self.button_locator = None
        # self.button_sell = None
        #
        # self.trade_instrument = None
        #
        # super().__init__(browser, link, bid)

#     @allure.step(f'{datetime.now()}   Start Full test [Sell] button on Table Widget Trading Instruments')
#     def full_test_with_tpi(self, d, cur_language, cur_country, cur_role, cur_item_link, sorting):
        qty_rnd = 2  # Тестируем два случайных инструмента
        # num_item_list = self.arrange_(d, cur_item_link, sorting)
        # print(f"\n{datetime.now()}   num_item_list = {num_item_list}")
        #
        # check_popup = SignupLogin(d, cur_item_link, sorting) # 15.03.24
        # check_popup.check_popup_signup_form()
        # del check_popup

        #  random_indexes = random.sample(range(0, num_item_list), qty_rnd) # убрали
        #  print(f"\n{datetime.now()}   Random indexes = {random_indexes}")
#
        # for i, index in enumerate(num_item_list):
        #     trade_instrument = self.element_click(self.driver, index, sorting)
        #     if not trade_instrument:
        #         pytest.fail("Testing element is not clicked")
#
            check_element = AssertClass(self.driver, cur_item_link, self.bid)
            match cur_role:
#                 case "NoReg":
#                     check_element.assert_signup(d, cur_language, cur_item_link)
#                 case "NoAuth":
#                     check_element.assert_login(d, cur_language, cur_item_link)
#                 case "Auth":
#                     check_element.assert_trading_platform_v4(d, cur_item_link, False, True, trade_instrument)
#
#             self.driver.get(cur_item_link)
#
#
#
     def arrange(self, d, cur_item_link, sorting):
         # global Count = 0 # 15.03.24
        print(f"\n{datetime.now()}   1. Arrange TABLE_TRADING_INSTRUMENTS: '{sorting}' sorting")
#
#         if not self.current_page_is(cur_item_link):
#             self.link = cur_item_link
#             self.open_page()
#
            print(f"{datetime.now()}   IS TABLE_TRADING_INSTRUMENTS present on this page? =>")
            dropdown_list = self.driver.find_elements(*ItemSortDropdownLocators.ALL_ITEM_DROPDOWN_SORT)
            if len(dropdown_list) == 0:
                print(f"{datetime.now()}   => TABLE_TRADING_INSTRUMENTS is NOT present on this page\n")
                pytest.fail(f" Bug ? Checking element is not on this page")
            print(f"{datetime.now()}   => TABLE_TRADING_INSTRUMENTS present on the page!\n")
#
#             print(f"{datetime.now()}   IS TABLE_TRADING_INSTRUMENTS visible on this page? =>")
#             if not self.element_is_visible(ItemSortDropdownLocators.ALL_ITEM_DROPDOWN_SORT, 5):
#                 print(f"{datetime.now()}   => TABLE_TRADING_INSTRUMENTS is NOT visible on the page!\n")
#                 pytest.fail("Checking element is present in DOM this page, but not visible")
#             print(f"{datetime.now()}   => TABLE_TRADING_INSTRUMENTS is visible on the page!\n")
#
#             try:
#                 self.driver.execute_script(
#                     'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});',
#                     dropdown_list[0]
#                 )

#                 dropdown_list[0].click() # 15.03.24

#
#             match sorting:
#                 case 'Most traded':
#                     self.sorting_locator = ItemSortDropdownLocators.ITEM_DROPDOWN_SORT_MOST_TRADED
#                 case 'Top risers':
#                     self.sorting_locator = ItemSortDropdownLocators.ITEM_DROPDOWN_SORT_TOP_RISERS
#                 case 'Top fallers':
#                     self.sorting_locator = ItemSortDropdownLocators.ITEM_DROPDOWN_SORT_TOP_FALLERS
#                 case 'Most volatile':
#                     self.sorting_locator = ItemSortDropdownLocators.ITEM_DROPDOWN_SORT_MOST_VOLATILE
#
#             print(f"{datetime.now()}   IS SORTING '{sorting}' visible on the page? =>")

#             if not self.element_is_visible(self.sorting_locator, 5):
#                 print(f"{datetime.now()}   => SORTING '{sorting}' is NOT visible on the page!\n")
#                 pytest.fail("Checking element is present in DOM this page, but not visible")
#             print(f"{datetime.now()}   => SORTING '{sorting}' is visible on the page!\n")

#             print(f"{datetime.now()}   IS SORTING '{sorting}' present on this page? =>")
#             sorting_list = self.driver.find_elements(*self.sorting_locator)
#             if len(sorting_list) == 0:
#                 print(f"{datetime.now()}   => SORTING '{sorting}' is NOT present on this page\n")
#                 pytest.fail("Checking element is not on this page")
#             print(f"{datetime.now()}   => SORTING '{sorting}' present on the page!\n")
#
#
#             print(f"{datetime.now()}   Start Click button '{sorting}' SORTING =>")
#             if not self.current_sorting = self.driver.find_element(*self.sorting_locator)
#             self.driver.execute_script(
#                 'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});',
#                 self.current_sorting
#             )
#
#             try:
#                 self.current_sorting.click()
#                 print(f"{datetime.now()}   => End Click button '{sorting}' SORTING\n")
#             except ElementNotInteractableException:
#                 print(f"{datetime.now()}   => Button '{sorting}' SORTING it's NOT clickable\n")
#                 pytest.fail("Checking element is not clickable")
#
#
#             print(f"{datetime.now()}   Is INSTRUMENTS present? =>")
#             self.instruments_locator = ButtonSellOnTableTradingInstrumentsLocators.TABLE_TRADING_INSTRUMENTS_LIST
#             self.instruments_list = self.driver.find_elements(*self.instruments_locator)
#
#             if len(self.instruments_list) == 0:
#                 print(f"{datetime.now()}   => INSTRUMENTS is NOT present on this page\n")
#                 pytest.fail("Checking element is not on this page")
#             print(f"{datetime.now()}   => INSTRUMENTS is present on this page!\n")
#
#             print(f"{datetime.now()}   Is INSTRUMENTS visible? =>")
#             if not self.element_is_visible(self.instruments_locator, 5):
#                 print(f"{datetime.now()}   => INSTRUMENTS is NOT visible on the page!\n")
#                 pytest.fail("Checking element is present in DOM this page, but not visible")
#             print(f"{datetime.now()}   => INSTRUMENTS is visible on the page!\n")
#
#             print(f"{datetime.now()}   Start Find and Click button Sell =>")
#
#             if self.driver.find_elements(*self.instruments_locator) != 0:
#                 print(f"{datetime.now()}   => Buttons [Sell] is visible !\n")
#                 print(f"{datetime.now()}   Start find two random buttons [Sell] on sorting \"{sorting}\"=>")
#                 self.instruments_list = self.driver.find_elements(*self.instruments_locator)
#                 qty_rnd = 2  # Тестируем два случайных инструмента
#                 random_indices = random.sample(range(len(self.instruments_list)), qty_rnd)
#
#                 for i, index in enumerate(random_indices):
#                     trade_instrument = self.element_click(index)
#                     if not trade_instrument:
#                         pytest.fail("Testing element is not clicked")
#             else:
#                 print(f"{datetime.now()}   => Buttons [Sell] is NOT visible")
#                 pytest.fail("Bug ? element is not on this page")
#
#     # @allure.step("Click button [Sell]")
#     def element_click(self, d, sorting):
#
#         print(f"{datetime.now()}   2. Act for for Instrument and '{sorting}' SORTING")
#
#         print(f"{datetime.now()}   IS button [Sell] for '{sorting}' SORTING visible on the page? =>")
#         self.button_locator = ButtonSellOnTableTradingInstrumentsLocators.TABLE_TRADING_INSTRUMENTS_LIST
#         if self.driver.find_element(*self.button_locator):
#             print(f"{datetime.now()}   => Button [Sell] for '{sorting}' SORTING is visible on the page!\n")
#
#             print(f"{datetime.now()}   Start click button [Sell] =>")
#             self.button_sell = self.driver.find_element(*self.button_locator)
#                 self.driver.execute_script(
#                 'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});',
#                 self.button_sell
#             )
#                 self.button_sell.click()
#                 print(f"{datetime.now()}   => End Click button [Sell]")
#             else:
#                 print(f"{datetime.now()}   => Button [Sell] for '{sorting}' SORTING is NOT visible on the page!\n")
#                 pytest.fail("Checking element is not on this page")

import random
from datetime import datetime

import pytest
import allure
from selenium.webdriver import ActionChains

from pages.Signup_login.signup_login import SignupLogin
from pages.base_page import BasePage
from pages.Elements.testing_elements_locators import ButtonSellOnTableTradingInstrumentsLocators, \
    ItemSortDropdownLocators
from pages.Elements.AssertClass import AssertClass


class TableTradingInstrumentsSellButton(BasePage):

    def __init__(self, browser, link, bid):
        self.item_sorting = None
        self.sorting_locator = None
        self.current_sorting = None

        self.instruments_locator = None
        self.instruments_list = None
        self.cur_instrument = None

        self.button_locator = None
        self.button_sell = None

        self.trade_instrument = None

        super().__init__(browser, link, bid)

    @allure.step(f'{datetime.now()}   Start Full test [Sell] button on Table Widget Trading Instruments')
    def full_test_with_tpi(self, d, cur_language, cur_country, cur_role, cur_item_link, sorting):
        qty_rnd = 2  # Тестируем два случайных инструмента
        num_item_list = self.arrange_(d, cur_item_link, sorting)
        random_indexes = random.sample(range(0, num_item_list), qty_rnd)
        # print(f"\n{datetime.now()}   Random indexes = {random_indexes}")
        print(f"\n{datetime.now()}   num_item_list = {num_item_list}")

        check_popup = SignupLogin(d, cur_item_link, sorting)  # 15.03.24
        check_popup.check_popup_signup_form()
        del check_popup

        for i, index in enumerate(random_indexes):
            trade_instrument = self.element_click(self.driver, index, sorting)
            if not trade_instrument:
                pytest.fail("Testing element is not clicked")

            check_element = AssertClass(self.driver, cur_item_link, self.bid)
            match cur_role:
                case "NoReg":
                    check_element.assert_signup(d, cur_language, cur_item_link)
                case "NoAuth":
                    check_element.assert_login(d, cur_language, cur_item_link)
                case "Auth":
                    check_element.assert_trading_platform_v4(d, cur_item_link, False, True, trade_instrument)

    def arrange_(self, d, cur_item_link, sorting):
        print(f"\n{datetime.now()}   1. Arrange for TABLE_TRADING_INSTRUMENTS and '{sorting}' sorting")

        if not self.current_page_is(cur_item_link):
            self.link = cur_item_link
            self.open_page()

        # print(f"{datetime.now()}   IS TABLE_TRADING_INSTRUMENTS and sorting visible on this page? =>")
        # if not self.element_is_visible(ItemSortDropdownLocators.ALL_ITEM_DROPDOWN_SORT, 5):
        #     print(f"{datetime.now()}   => TABLE_TRADING_INSTRUMENTS and sorting NOT visible on the page!\n"),
        # pytest.fail("Checking element is present in DOM this page, but not visible"),
        # print(f"{datetime.now()}   => TABLE_TRADING_INSTRUMENTS and sorting visible on the page!\n")


        print(f"{datetime.now()}   TABLE_TRADING_INSTRUMENTS and sorting present on this page? =>")
        dropdown_list = self.driver.find_elements(*ItemSortDropdownLocators.ALL_ITEM_DROPDOWN_SORT)
        if len(dropdown_list) == 0:
            print(f"{datetime.now()}   => TABLE_TRADING_INSTRUMENTS and sorting is NOT present on this page\n")
            pytest.fail(f" Bug ? Checking sorting element is not on this page")
        print(f"{datetime.now()}   => TABLE_TRADING_INSTRUMENTS and sorting present on the page!\n")

        print(f"{datetime.now()}   Start scroll and click FIELD_DROPDOWN_SORT =>")
        self.driver.execute_script(
            'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});',
            dropdown_list[0]
        )
        dropdown_list[0].click()

        match sorting:
            case 'Most traded':
                self.sorting_locator = ItemSortDropdownLocators.ITEM_DROPDOWN_SORT_MOST_TRADED
            case 'Top risers':
                self.sorting_locator = ItemSortDropdownLocators.ITEM_DROPDOWN_SORT_TOP_RISERS
            case 'Top fallers':
                self.sorting_locator = ItemSortDropdownLocators.ITEM_DROPDOWN_SORT_TOP_FALLERS
            case 'Most volatile':
                self.sorting_locator = ItemSortDropdownLocators.ITEM_DROPDOWN_SORT_MOST_VOLATILE



        # print(f"{datetime.now()}   TABLE_TRADING_INSTRUMENTS is present? =>")
        # item_list = self.driver.find_elements(*ButtonSellOnTableTradingInstrumentsLocators.TABLE_TRADING_INSTRUMENTS_LIST)
        # num_item = len(item_list)
        # if num_item == 0:
        #     print(f"{datetime.now()}   => TABLE_TRADING_INSTRUMENTS is not present on this page")
        #     pytest.skip("Checking element is not on this page")
        print(f"{datetime.now()}   => TABLE_TRADING_INSTRUMENTS is present on this page")
        print(f"{datetime.now()}   => Found {num_item} elements in TABLE_TRADING_INSTRUMENTS")

        print(f"{datetime.now()}   Most Table Widget Trading Instruments is scroll =>")
        self.driver.execute_script(
            'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});', item_list[0])
        print(f"{datetime.now()}   => Most Table Widget Trading Instruments is scrolled into screen center")

        # возвращаем количество элементов в Most Trade block
        return num_item

    @allure.step('Click Sell button on Table Widget Trading Instruments')
    def element_click(self, random_index):
        print(f"\n{datetime.now()}   2. Act_v0")

        check_popup = SignupLogin(self.driver, self.link)
        check_popup.check_popup_signup_form()
        del check_popup

        table_trading_instrument_list = self.driver.find_elements(*ButtonSellOnTableTradingInstrumentsLocators.TABLE_TRADING_INSTRUMENTS_NAME_LIST)
        if len(table_trading_instrument_list) == 0:
            pytest.fail("Problem! List of instruments is empty.")
        instrument_item = table_trading_instrument_list[random_index]
        instrument_title = instrument_item.get_attribute('title')

        item_list = self.driver.find_elements(*ButtonSellOnTableTradingInstrumentsLocators.TABLE_TRADING_INSTRUMENTS_LIST)
        element = item_list[random_index]

        print(f"{datetime.now()}   Selected Sell button on Table Widget Trading Instruments is scroll =>")
        self.driver.execute_script(
            'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});', element)

        print(f"{datetime.now()}   Selected Sell button click for '{instrument_title}' trading instrument =>")

        ActionChains(self.driver) \
            .pause(0.5) \
            .move_to_element(element) \
            .perform()

        if not self.element_is_clickable(element, 3):
            return ""

        ActionChains(self.driver) \
            .click() \
            .perform()
        print(f"{datetime.now()}   => Selected Sell button clicked!")

        return instrument_title  # возвращаем название торгового инструмента







# import random
# from datetime import datetime
#
# import pytest
# import allure
# from selenium.webdriver import ActionChains
#
# from pages.Signup_login.signup_login import SignupLogin
# from pages.base_page import BasePage
# from pages.Elements.testing_elements_locators import ButtonSellOnTableTradingInstrumentsLocators
# from pages.Elements.AssertClass import AssertClass
#
#
# class TableTradingInstrumentsSellButton(BasePage):
#
#     @allure.step(f'{datetime.now()}   Start Full test [Sell] button on Table Widget Trading Instruments')
#     def full_test_with_tpi(self, d, cur_language, cur_country, cur_role, cur_item_link):
#         qty_rnd = 2  # Тестируем два случайных инструмента
#         num_item = self.arrange_(cur_item_link)
#         random_indexes = random.sample(range(0, num_item), qty_rnd)
#         print(f"\n{datetime.now()}   Random indexes = {random_indexes}")
#
#         for i, index in enumerate(random_indexes):
#
#             print(f"\n{datetime.now()}   Testing Table Widget Trading Instruments {i + 1} random element with {index} index")
#             trade_instrument = self.element_click(index)
#             if not trade_instrument:
#                 pytest.fail("Testing element is not clicked")
#
#             check_element = AssertClass(d, cur_item_link, self.bid)
#             match cur_role:
#                 case "NoReg":
#                     check_element.assert_signup(d, cur_language, cur_item_link)
#                 case "NoAuth":
#                     check_element.assert_login(d, cur_language, cur_item_link)
#                 case "Auth":
#                     check_element.assert_trading_platform_v4(d, cur_item_link, False, True, trade_instrument)
#
#     def arrange_(self, cur_item_link):
#         print(f"\n{datetime.now()}   1. Arrange_v0")
#
#         if not self.current_page_is(cur_item_link):
#             self.link = cur_item_link
#             self.open_page()
#
#         print(f"{datetime.now()}   TABLE_TRADING_INSTRUMENTS is present? =>")
#         item_list = self.driver.find_elements(*ButtonSellOnTableTradingInstrumentsLocators.TABLE_TRADING_INSTRUMENTS_LIST)
#         num_item = len(item_list)
#         if num_item == 0:
#             print(f"{datetime.now()}   => TABLE_TRADING_INSTRUMENTS is not present on this page")
#             pytest.skip("Checking element is not on this page")
#         print(f"{datetime.now()}   => TABLE_TRADING_INSTRUMENTS is present on this page")
#         print(f"{datetime.now()}   => Found {num_item} elements in TABLE_TRADING_INSTRUMENTS")
#
#         print(f"{datetime.now()}   Most Table Widget Trading Instruments is scroll =>")
#         self.driver.execute_script(
#             'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});', item_list[0])
#         print(f"{datetime.now()}   => Most Table Widget Trading Instruments is scrolled into screen center")
#
#         # возвращаем количество элементов в Most Trade block
#         return num_item
#
#     @allure.step('Click Sell button on Table Widget Trading Instruments')
#     def element_click(self, random_index):
#         print(f"\n{datetime.now()}   2. Act_v0")
#
#         check_popup = SignupLogin(self.driver, self.link)
#         check_popup.check_popup_signup_form()
#         del check_popup
#
#         table_trading_instrument_list = self.driver.find_elements(*ButtonSellOnTableTradingInstrumentsLocators.TABLE_TRADING_INSTRUMENTS_NAME_LIST)
#         if len(table_trading_instrument_list) == 0:
#             pytest.fail("Problem! List of instruments is empty.")
#         instrument_item = table_trading_instrument_list[random_index]
#         instrument_title = instrument_item.get_attribute('title')
#
#         item_list = self.driver.find_elements(*ButtonSellOnTableTradingInstrumentsLocators.TABLE_TRADING_INSTRUMENTS_LIST)
#         element = item_list[random_index]
#
#         print(f"{datetime.now()}   Selected Sell button on Table Widget Trading Instruments is scroll =>")
#         self.driver.execute_script(
#             'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});', element)
#
#         print(f"{datetime.now()}   Selected Sell button click for '{instrument_title}' trading instrument =>")
#
#         ActionChains(self.driver) \
#             .pause(0.5) \
#             .move_to_element(element) \
#             .perform()
#
#         if not self.element_is_clickable(element, 3):
#             return ""
#
#         ActionChains(self.driver) \
#             .click() \
#             .perform()
#         print(f"{datetime.now()}   => Selected Sell button clicked!")
#
#         return instrument_title  # возвращаем название торгового инструмента

