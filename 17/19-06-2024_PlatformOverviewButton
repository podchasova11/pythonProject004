"""
-*- coding: utf-8 -*-
@Time    : 2024/06/14 10:20
@Author  : podchasova11
"""

# from datetime import datetime
#
# import allure
# import pytest
#
# from pages.Elements.AssertClass import AssertClass
# from pages.Elements.testing_elements_locators import MyAccountButtonLocators
# from pages.Menu.menu import MenuSection
# from pages.base_page import BasePage
# from pages.common import Common
# from pages.conditions import Conditions
# from src.src import CapitalComPageSrc
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.support.wait import WebDriverWait
#
#
# class MyAccountButton(BasePage):
#     user_story_menu_link = None
#
#     @allure.step(f"{datetime.now()}   Start full test of [Platform overview] button")
#     def full_test(self, d, cur_language, cur_country, cur_role, link):
#         self.get_us_link()
#         self.arrange_(d)
#         self.element_click()
#
#         test_element = AssertClass(d, self.bid)
#         match cur_role:
#             case "NoReg" | "NoAuth" | "Auth":
#                 test_element.assert_that_trading_page_is_opened(d)
#
#     def get_us_link(self, d, cur_language, cur_country, cur_role, cur_login, cur_password):
#         if cur_language not in ["en"]:
#             pytest.skip(f"This test is not for {cur_language} language")
#
#             page_conditions = Conditions(d, "")
#             main_link = page_conditions.preconditions(
#                 d, CapitalComPageSrc.URL, "", cur_language, cur_country, cur_role, cur_login, cur_password)
#             if not self.user_story_menu_link:
#                 page_menu = MenuSection(d, main_link)
#                 page_menu.menu_education_move_focus(d, cur_language, cur_country)
#                 us_link = page_menu.sub_menu_investmate_app_move_focus_click(d, cur_language)
#                 self.user_story_menu_link = us_link
#             return self.user_story_menu_link
#
#
#            #####################################
#
#     def arrange_(self, link):
#         print(f"\n{datetime.now()}   1. Arrange for [Platform overview] button")
#
#         if not self.current_page_is(link):
#             self.link = CapitalComPageSrc.URL
#             self.open_page()
#
#     print(f"{datetime.now()}   Is BUTTON_MY_ACCOUNT present on the page? =>")
#     button = self.driver.find_elements(*MyAccountButtonLocators.BUTTON_MY_ACCOUNT)
#     if len(button) == 0:
#         print(f"{datetime.now()}   => BUTTON_MY_ACCOUNT is not present on the page")
#         Common().pytest_fail("BUTTON_MY_ACCOUNT is not present on the page")
#     print(f"{datetime.now()}   => BUTTON_MY_ACCOUNT is present on the page")
#     self.driver.execute_script(
#         'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});',
#         button[0]
#     )
#
#     print(f"{datetime.now()}   Is BUTTON_MY_ACCOUNT clickable?  =>")
#     time_out = 3
#     if not self.element_is_clickable(button[0], time_out):
#         print(f"{datetime.now()}   => BUTTON_MY_ACCOUNT is not clickable after {time_out} sec")
#         Common.pytest_fail("Bug ? BUTTON_MY_ACCOUNT is not clickable")
#     print(f"{datetime.now()}   => BUTTON_MY_ACCOUNT is clickable")
#
#     @allure.step("Click My account button in the page header")
#     def element_click(self):
#         print(f"{datetime.now()}   2. Act for My account button")
#         print(f"{datetime.now()}   Start to click BUTTON_MY_ACCOUNT =>")
#
#         button = self.driver.find_elements(*MyAccountButtonLocators.BUTTON_MY_ACCOUNT)
#         button[0].click()
#
#         WebDriverWait(self.driver, 10).until(
#             EC.url_changes(self.driver.current_url)
#         )
#
#         print(f"{datetime.now()}   => BUTTON_MY_ACCOUNT is clicked")

from datetime import datetime
import allure

from pages.common import Common
from pages.base_page import BasePage
from pages.Elements.AssertClass import AssertClass
from pages.Elements.testing_elements_locators import ContentBlockLocators
from selenium.common.exceptions import ElementClickInterceptedException

BUTTON_NAME = '[Try now]'
BLOCK_NAME = '"Why choose Capital.com?"'
BUTTON_LOCATOR = ContentBlockLocators.WHY_CHOOSE_BLOCK_IN_CONTENT_TRY_NOW_BUTTON
BLOCK_LOCATOR = ContentBlockLocators.WHY_CHOOSE_BLOCK_IN_CONTENT


class WhyChooseBlockTryNowButtonInContent(BasePage):
    global BUTTON_NAME
    global BLOCK_NAME
    global BUTTON_LOCATOR
    global BLOCK_LOCATOR

    def __init__(self, browser, link, bid):
        self.button_create_demo_account = None

        super().__init__(browser, link, bid)

    @allure.step(f"{datetime.now()}   Start Full test for {BUTTON_NAME} button in {BLOCK_NAME} block")
    def full_test_with_tpi(self, d, cur_language, cur_country, cur_role, cur_item_link):
        self.arrange_(d, cur_item_link)
        self.element_click(d)

        test_element = AssertClass(d, cur_item_link, self.bid)
        match cur_role:
            case "NoReg":
                test_element.assert_signup(d, cur_language, cur_item_link)
            case "NoAuth":
                test_element.assert_login(d, cur_language, cur_item_link)
            case "Auth":
                test_element.assert_trading_platform_v4(d, cur_item_link)

    def arrange_(self, d, cur_item_link):
        print(f"\n{datetime.now()}   1. Arrange_v0")

        if not self.current_page_is(cur_item_link):
            self.link = cur_item_link
            self.open_page()

        # Check presenting and visible in block
        print(f"{datetime.now()}   IS {BLOCK_NAME} block present on this page? =>")
        block_trading_experience = self.driver.find_elements(*BLOCK_LOCATOR)
        if len(block_trading_experience) == 0:
            msg = f"{BLOCK_NAME} block is NOT present on this page"
            print(f"{datetime.now()}   => {msg}\n")
            Common().pytest_fail(msg)
        print(f"{datetime.now()}   => {BLOCK_NAME} block present on this page!\n")

        self.driver.execute_script(
            'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});',
            self.driver.find_elements(*BLOCK_LOCATOR)[0]
        )

        print(f"{datetime.now()}   IS {BLOCK_NAME} block visible on this page? =>")
        if not self.element_is_visible(BLOCK_LOCATOR, 5):
            msg = f"{BLOCK_NAME} block is NOT visible on this page!"
            print(f"{datetime.now()}   => {msg}\n")
            Common().pytest_fail(msg)
        print(f"{datetime.now()}   => {BLOCK_NAME} block is visible on this page!\n")

        # Check presenting and visible button
        print(f"{datetime.now()}   IS {BUTTON_NAME} button present on this page? =>")
        self.button_create_demo_account = self.driver.find_elements(*BUTTON_LOCATOR)
        if len(self.button_create_demo_account) == 0:
            msg = f"{BUTTON_NAME} button is NOT present on this page"
            print(f"{datetime.now()}   => {msg}\n")
            Common().pytest_fail(msg)
        print(f"{datetime.now()}   => {BUTTON_NAME} button present on this page!\n")

        self.driver.execute_script(
            'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});',
            self.driver.find_elements(*BUTTON_LOCATOR)[0]
        )

        print(f"{datetime.now()}   IS {BUTTON_NAME} button visible on this page? =>")
        if not self.element_is_visible(BUTTON_LOCATOR, 5):
            msg = f"{BUTTON_NAME} button is NOT visible on this page!"
            print(f"{datetime.now()}   => {msg}\n")
            Common().pytest_fail(msg)
        print(f"{datetime.now()}   => {BUTTON_NAME} button is visible on this page!\n")

        print(f"{datetime.now()}   {BUTTON_NAME} button scroll =>")
        self.driver.execute_script(
            'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});',
            self.button_create_demo_account[0]
        )

    @allure.step(f"Click button {BUTTON_NAME} on {BLOCK_NAME} block")
    def element_click(self, d):
        print(f"\n{datetime.now()}   2. Act_v0")

        print(f"{datetime.now()}   {BUTTON_NAME} button is clickable? =>")
        time_out = 5
        self.button_create_demo_account = self.driver.find_elements(*BUTTON_LOCATOR)
        if not self.element_is_clickable(self.button_create_demo_account[0], time_out):
            msg = f"{BUTTON_NAME} button is not clickable after {time_out} sec. Stop AT>"
            print(f"{datetime.now()}   => {msg}\n")
            Common().pytest_fail(msg)
        print(f"{datetime.now()}   => {BUTTON_NAME} button is clickable!\n")

        try:
            self.button_create_demo_account[0].click()
            print(f"{datetime.now()}   => {BUTTON_NAME} button clicked!")
        except ElementClickInterceptedException:
            print(f"{datetime.now()}   => {BUTTON_NAME} button NOT CLICKED")

        del self.button_create_demo_account
        return True
