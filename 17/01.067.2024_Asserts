    @allure.step("Checking that the trading platform page has opened - ver 4")
    def should_be_trading_platform_page_v4(self, d, test_link, tpd, tpi, trade_instrument):
        """
        Check if the trading platform page for the corresponding trade instrument is opened
        Args:
            d: Webdriver
            test_link: Link in the list of 3 random items and start page of the sidebar
            tpd: open Trade platform in Demo mode (True). Live mode (False)
            tpi: open Trade platform for corresponding trade instrument (False)
            trade_instrument: corresponding trade instrument (False)
        """

        print(f"{datetime.now()}   Checking that the trading platform page has opened (v4) =>")
        platform_url = data["PLATFORM_URL/"]
        cur_url = self.driver.current_url
        if self.wait_for_target_url(platform_url, 10):
            print(f"{datetime.now()}   Checking way # 1 => ")
            self.should_be_page_title_v2(data["PAGE_TITLE"])
            self.should_be_platform_logo()

#################################################################################################

   @HandleExcElementsDecorator()
    @allure.step(f"{datetime.now()}   Check that the page has the expected title - ver 2")
    def should_be_page_title_v2(self, title):
        """
        Check that the page has the expected title.

        Args:
            title: expected page's title
        """
        print(f"\n{datetime.now()}"
              f"   1. Checking that the Trading platform (or TradingView site) page has valid title =>")
        el_title = self.driver.title
        print(f"{datetime.now()}   => The title of current page is '{el_title}'")
        # Checks that the page title meets the requirements
        if title not in el_title:
            msg = f"Bug # ??? Expected title '{title}' but got '{el_title}' on page: {self.driver.current_url}"
            Common().assert_true_false(False, msg)



@HandleExcElementsDecorator()
    @allure.step(f"{datetime.now()}   Check that the page has the expected title - ver 3")
    def should_be_page_title_v3(self, expected_title):
        """
        Check that the page has the expected title.

        Args:
            expected_title: expected page's title
        """
        print(f"\n{datetime.now()}"
              f"   Checking that the page has expected title =>")
        current_title = self.driver.title
        print(f"{datetime.now()}   The title of current page is '{current_title}'")
        print(f"{datetime.now()}   The expected title is '{expected_title}'")
        # Check that the page title meets the requirements
        Common().assert_true_false(
            expected_title in current_title,
            f"{datetime.now()}   "
            f"=> Expected title '{expected_title}' but got '{current_title}' on page: {self.driver.current_url}\n"
        )
        print(f"{datetime.now()}   => The page has expected title.\n")
