
    @allure.step("Click button [Create Account] on Main banner")
    def element_click(self):
        print(f"\n{datetime.now()}   2. Act_v0")
        print(f"{datetime.now()}   Start Click button [Create Account] =>")
        button_list = self.driver.find_elements(*MainBannerLocators.BUTTON_CREATE_ACCOUNT)

        print(f"{datetime.now()}   BUTTON_CREATE_ACCOUNT is clickable? =>")
        time_out = 3
        if not self.element_is_clickable(button_list[0], time_out):
            print(f"{datetime.now()}   => BUTTON_CREATE_ACCOUNT is not clickable after {time_out} sec. Stop TC>")
            pytest.fail(f"BUTTON_CREATE_ACCOUNT is not clickable after {time_out} sec.")

        print(f"{datetime.now()}   BUTTON_CREATE_ACCOUNT click =>")
        try:
            button_list[0].click()
            print(f"{datetime.now()}   => BUTTON_CREATE_ACCOUNT clicked")
        except ElementClickInterceptedException:
            print(f"{datetime.now()}   => BUTTON_CREATE_ACCOUNT not clicked")
            print(f"{datetime.now()}   'Signup' or 'Login' form is automatically opened")

            page_ = SignupLogin(self.driver)
            if page_.close_signup_form():
                pass
            elif page_.close_login_form():
                pass
            elif page_.close_signup_page():
                pass
            else:
                page_.close_login_page()

            del page_
            button_list[0].click()

        del button_list
        return True

    @allure.step("Checking that the trading platform page has opened - ver 4")

    def should_be_trading_platform_page_v4(self, d, test_link, tpd, tpi, trade_instrument):
        """
        Check if the trading platform page for the corresponding trade instrument is opened
        Args:
            d: Webdriver
            test_link: Link in the list of 3 random items and start page of the sidebar
            tpd: open Trade platform in Demo mode (True). Live mode (False)
            tpi: open Trade platform for corresponding trade instrument (False)
            trade_instrument: corresponding trade instrument (False)
        """

        print(f"{datetime.now()}   Checking that the trading platform page has opened (v4) =>")
        platform_url = data["PLATFORM_URL/"]
        cur_url = self.driver.current_url
        if self.wait_for_target_url(platform_url, 10):
            print(f"{datetime.now()}   Checking way # 1 => ")
            self.should_be_page_title_v2(data["PAGE_TITLE"])
            self.should_be_platform_logo()

            print(f"\n{datetime.now()}   tpd = {tpd}")
            if tpd:
                self.should_be_platform_demo_mode(d, test_link)
                print(f"{datetime.now()}   => The page with {self.driver.current_url} url was opened in DEMO mode")
            # else:
            #     self.should_be_trading_platform_live_mode(d, test_link)
            #     print(f"{datetime.now()}   => The page with {self.driver.current_url} url was opened in lIVE mode")

            if tpi:
                print(f"\n{datetime.now()}   4. Check that opened page with {self.driver.current_url} url\n"
                      f"with selected corresponding trading instrument '{trade_instrument}' =>")
                self.should_be_corresponding_trading_instrument(test_link, trade_instrument)

            # assert True, 'Trading platform with title "Trading Platform | Capital.com" opened'
            msg = 'Trading platform with title "Trading Platform | Capital.com" opened'
            Common.browser_back_to_link_and_test_pass(d, test_link, msg)
        else:
            print(f"{datetime.now()}   Checking way # 2 =>")
            self.should_be_page_title_v2(data["PAGE_TITLE"])
            self.should_be_platform_logo()
            print(f"{datetime.now()}   tpd = {tpd}")
            if tpd:
                print(f"{datetime.now()}   => Loaded page {self.driver.current_url} with not {platform_url} url")
                # проверка бага для ретеста

                print(f'\nBug: {self.bid}')
                retest_table_fill(d, self.bid, '09', self.link)

                # assert False, (f"Bug # 9. Loaded page with {cur_url} url, but expected the Trading platform in"
                #                f"Demo mode(timeout=15c)")
                Common.flag_of_bug = True
                msg = (f"Bug # 9. Loaded page with {cur_url} url, "
                       f"but expected the Trading platform in Demo mode (timeout=15c)")
                assert False, msg
                # Common().browser_back_to_link_and_test_fail(self.driver, test_link, msg)
            else:
                print(f"{datetime.now()}   => Loaded page {cur_url} with not {platform_url} url")
                # проверка бага для ретеста

                print(f'\nBug: {self.bid}')
                retest_table_fill(d, self.bid, '10', self.link)

                # assert False, (f"Bug # 10. Loaded page with {cur_url} url, but expected the Trading platform in"
                #                f"Live mode(timeout=15c)")
                Common.flag_of_bug = True
                msg = (f"Bug # 10. Loaded page with {cur_url} url, "
                       f"but expected the Trading platform in Live mode (timeout=15c)")
                assert False, msg
                # Common().browser_back_to_link_and_test_fail(self.driver, test_link, msg)

#################################################################################################

   @HandleExcElementsDecorator()
    @allure.step(f"{datetime.now()}   Check that the page has the expected title - ver 2")
    def should_be_page_title_v2(self, title):
        """
        Check that the page has the expected title.

        Args:
            title: expected page's title
        """
        print(f"\n{datetime.now()}"
              f"   1. Checking that the Trading platform (or TradingView site) page has valid title =>")
        el_title = self.driver.title
        print(f"{datetime.now()}   => The title of current page is '{el_title}'")
        # Checks that the page title meets the requirements
        if title not in el_title:
            msg = f"Bug # ??? Expected title '{title}' but got '{el_title}' on page: {self.driver.current_url}"
            Common().assert_true_false(False, msg)


    def should_be_platform_logo(self):
        """Check that the Capital.com Logo is present"""
        allure.step(f"{datetime.now()}   Check that the Logo element is present on the page")

        print(f"\n{datetime.now()}   2. Checking that the LOGO is present on the page =>")
        if not self.element_is_visible(TopBarLocators.LOGO, 10):
            msg = "'capital*com' logo is not present on the current page"
            print(f"{datetime.now()}   => {msg}")
            Common().assert_true_false(False, msg)
        print(f"{datetime.now()}   => 'capital*com' logo is present on the current page")

################################################################################################################################################################



@HandleExcElementsDecorator()
    @allure.step(f"{datetime.now()}   Check that the page has the expected title - ver 3")
    def should_be_page_title_v3(self, expected_title):
        """
        Check that the page has the expected title.

        Args:
            expected_title: expected page's title
        """
        print(f"\n{datetime.now()}"
              f"   Checking that the page has expected title =>")
        current_title = self.driver.title
        print(f"{datetime.now()}   The title of current page is '{current_title}'")
        print(f"{datetime.now()}   The expected title is '{expected_title}'")
        # Check that the page title meets the requirements
        Common().assert_true_false(
            expected_title in current_title,
            f"{datetime.now()}   "
            f"=> Expected title '{expected_title}' but got '{current_title}' on page: {self.driver.current_url}\n"
        )
        print(f"{datetime.now()}   => The page has expected title.\n")
