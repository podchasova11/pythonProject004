from datetime import datetime

importallure
from selenium.webdriver import ActionChains
from selenium.common.exceptions import ElementClickInterceptedException

from pages.Signup_login.signup_login import SignupLogin
from pages.base_page import BasePage
from pages.common import Common
from pages.Elements.AssertClass import AssertClass
from pages.Elements.testing_elements_locators import PageTradingInstrumentMarketsLocators


class PageInstrumentLongPositionGoToPlatformButton(BasePage):

    @allure.step(f"{datetime.now()}   Start test for button [Go to platform] on trading instrument page")
    def full_test_with_tpi(self, d, cur_language, cur_country, cur_role, cur_item_link):
        self.arrange_(d, cur_item_link)

        page_signup_login = SignupLogin(d, cur_item_link)
        page_signup_login.check_popup_signup_form()

        self.element_click()

        test_element = AssertClass(d, cur_item_link, self.bid)
        match cur_role:
            case "NoReg":
                test_element.assert_signup(d, cur_language, cur_item_link)
            case "NoAuth":
                test_element.assert_login(d, cur_language, cur_item_link)
            case "Auth":
                test_element.assert_trading_platform_v4(d, cur_item_link)
        self.driver.get(cur_item_link)

    @allure.step(f"{datetime.now()}   Start test for button [Go to platform] on trading instrument page")
    def full_test_with_tpi_v2(self, d, cur_language, cur_country, cur_role, cur_item_link):
        self.arrange_v2(d, cur_item_link)

        page_signup_login = SignupLogin(d, cur_item_link)
        page_signup_login.check_popup_signup_form()

        self.element_act_v2()

        test_element = AssertClass(d, cur_item_link, self.bid)
        match cur_role:
            case "NoReg":
                test_element.assert_signup(d, cur_language, cur_item_link)
            case "NoAuth":
                test_element.assert_login(d, cur_language, cur_item_link)
            case "Auth":
                test_element.assert_trading_platform_v4(d, cur_item_link)
        self.driver.get(cur_item_link)

    def arrange_(self, d, cur_item_link):
        print(f"\n{datetime.now()}   1. Arrange_v0")

        if not self.current_page_is(cur_item_link):
            self.link = cur_item_link
            self.open_page()

        print(f"{datetime.now()}   Is TOOLINFO_LONG_POSITION_OVERNIGHT_FEE present on the page? =>")
        tool_info = self.driver.find_element(PageTradingInstrumentMarketsLocators.TOOLINFO_LONG_POSITION_OVERNIGHT_FEE)
        if len(tool_info) == 0:
            print(f"{datetime.now()}   => TOOLINFO_LONG_POSITION_OVERNIGHT_FEE is not present on the page")
            Common().pytest_fail("Bug # ???   TOOLINFO_LONG_POSITION_OVERNIGHT_FEE is not present on the page")

        ActionChains(d) \
            .move_to_element(tool_info[0]) \
            .pause(0.5) \
            .perform()

        print(f"{datetime.now()}   Is TOOLTIP_LONG_POSITION_FEE open?  =>")
        tooltip = self.element_is_visible(PageTradingInstrumentMarketsLocators.TOOLTIP_LONG_POSITION_FEE)
        if tooltip == 0:
            print(f"{datetime.now()}   => TOOLTIP_LONG_POSITION_FEE is not open")
            Common().pytest_fail("Bug # ???   TOOLTIP_LONG_POSITION_FEE is not open")

        ActionChains(d) \
            .move_to_element(tooltip) \
            .pause(0.5) \
            .perform()

        button_list = self.driver.find_elements(PageTradingInstrumentMarketsLocators.BUTTON_GO_TO_PLATFORM_LG)
        print(f"{datetime.now()}   Is button BUTTON_GO_TO_PLATFORM_LG present on the page? =>")
        if len(button_list) == 0:
            print(f"{datetime.now()}   => BUTTON_GO_TO_PLATFORM_LG is not present on the page")
            Common().pytest_fail("Bug # ???   BUTTON_GO_TO_PLATFORM_LG is not present on the page")
        print(f"{datetime.now()}   => BUTTON_GO_TO_PLATFORM_LG is present on the page")

        print(f"{datetime.now()}   BUTTON_GO_TO_PLATFORM_LG scroll =>")
        self.driver.execute_script(
            'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});',
            button_list[0]
        )
        print(f"{datetime.now()}   => BUTTON_GO_TO_PLATFORM_LG scrolled")

    def arrange_v2(self, d, cur_item_link):
        print(f"\n{datetime.now()}   1. Arrange_v2")

        if not self.current_page_is(cur_item_link):
            self.link = cur_item_link
            self.open_page()

        print(f"{datetime.now()}   Is LONG_POSITION_OVERNIGHT_FEE present on the page? =>")
        tool_info = self.driver.find_elements(*PageTradingInstrumentMarketsLocators.LONG_POSITION_OVERNIGHT_FEE)
        if len(tool_info) == 0:
            msg = "LONG_POSITION_OVERNIGHT_FEE is not present on the page"
            print(f"{datetime.now()}   => {msg}")
            Common().pytest_fail(f"Bug # ???   {msg}")
        print(f"{datetime.now()}   => LONG_POSITION_OVERNIGHT_FEE is present on the page")

        print(f"{datetime.now()}   LONG_POSITION_OVERNIGHT_FEE scroll =>")
        self.driver.execute_script(
            'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});',
            tool_info[0]
        )
        print(f"{datetime.now()}   => LONG_POSITION_OVERNIGHT_FEE scrolled")

    @allure.step("Click button [Go to platform] on the page content")
    def element_click(self):
        print(f"\n{datetime.now()}   2. Act_v0")
        print(f"{datetime.now()}   Start Click button [Go to platform] =>")

        button_list = self.driver.find_elements(PageTradingInstrumentMarketsLocators.BUTTON_GO_TO_PLATFORM_LG)

        time_out = 3
        if not self.element_is_clickable(button_list[0], time_out):
            print(f"{datetime.now()}   => BUTTON_GO_TO_PLATFORM_LG is not clickable after {time_out} sec. Stop TC>")
            Common().pytest_fail(f"Bug # ???   BUTTON_GO_TO_PLATFORM_LG is not clickable after {time_out} sec.")
        print(f"{datetime.now()}   BUTTON_GO_TO_PLATFORM_LG is clickable =>")

        button_list[0].click()
        print(f"{datetime.now()} => BUTTON_GO_TO_PLATFORM_LG clicked")

        del button_list
        return True

    @allure.step('Hover over tooltip "Long position overnight fee" --> Click button [Go to platform]')
    def element_act_v2(self):
        print(f"\n{datetime.now()}   2. Act_v2")
        print(f"{datetime.now()}   LONG_POSITION_OVERNIGHT_FEE open =>")
        tool_info = self.driver.find_elements(*PageTradingInstrumentMarketsLocators.LONG_POSITION_OVERNIGHT_FEE)
        ActionChains(self.driver) \
            .move_to_element(tool_info[0]) \
            .pause(0.5) \
            .perform()

        print(f"{datetime.now()}   Is LONG_POSITION_OVERNIGHT_FEE open?  =>")
        button_go_to_platform = self.element_is_visible(
            PageTradingInstrumentMarketsLocators.LONG_POSITION_BUTTON_GO_TO_PLATFORM)
        if not button_go_to_platform:
            msg = "LONG_POSITION_FEE is not open"
            print(f"{datetime.now()}   => {msg}")
            Common().pytest_fail(f"Bug # ???   {msg}")
        print(f"{datetime.now()}   => LONG_POSITION_OVERNIGHT_FEE opened")

        print(f"{datetime.now()}   Move focus on to button [Go to platform] and click =>")
        ActionChains(self.driver) \
            .move_to_element(button_go_to_platform) \
            .pause(0.5) \
            .perform()

        time_out = 5
        if not self.element_is_clickable(button_go_to_platform, time_out):
            msg = f"BUTTON_GO_TO_PLATFORM_FROM_LONG_POSITION is not clickable after {time_out} sec."
            print(f"{datetime.now()}   => {msg}")
            Common().pytest_fail(f"Bug # ???   {msg}")
        print(f"{datetime.now()}   => BUTTON_GO_TO_PLATFORM_FROM_LONG_POSITION is clickable")

        button_go_to_platform.click()
        print(f"{datetime.now()} => BUTTON_GO_TO_PLATFORM_FROM_LONG_POSITION clicked")
