"""
-*- coding: utf-8 -*-
@Time    : 2023/03/06 11:30
@Author  : podchasova11
"""
import random
from datetime import datetime

import pytest
import allure
from selenium.webdriver import ActionChains

from pages.Signup_login.signup_login import SignupLogin
from pages.base_page import BasePage
from pages.Elements.testing_elements_locators import ButtonSellOnTableTradingInstrumentsLocators
from pages.Elements.AssertClass import AssertClass


class TableTradingInstrumentsSellButton(BasePage):

    @allure.step(f'{datetime.now()}   Start Full test [Sell] button on Table Widget Trading Instruments')
    def full_test_with_tpi(self, d, cur_language, cur_country, cur_role, cur_item_link):
        qty_rnd = 1
        # self.clear_chart_list()
        num_item = self.arrange(cur_item_link)
        random_indexes = random.sample(range(0, num_item), qty_rnd)
        print(f"\n{datetime.now()}   Random indexes = {random_indexes}")
        counter = 0
        for i, index in enumerate(random_indexes):
            # if counter:
            #     self.clear_chart_list()
            #     self.arrange_v4(cur_item_link)

            print(f"\n{datetime.now()}   Testing Table Widget Trading Instruments {i + 1} random element with {index} index")
            trade_instrument = self.element_click(index)
            if not trade_instrument:
                pytest.fail("Testing element is not clicked")

            check_element = AssertClass(d, cur_item_link, self.bid)
            match cur_role:
                case "NoReg":
                    check_element.assert_signup(d, cur_language, cur_item_link)
                case "NoAuth":
                    check_element.assert_login(d, cur_language, cur_item_link)
                case "Auth":
                    check_element.assert_trading_platform_v4(d, cur_item_link, False, True, trade_instrument)
            counter += 1
