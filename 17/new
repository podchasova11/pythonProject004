"""
-*- coding: utf-8 -*-
@Time    : 2024/04/14 09:50 GMT+3
@Author  : Mila Podchasova
"""

import allure
import pytest

from pages.Elements.HeaderCFDCalculatorPageLoginButton import HeaderCFDCalculatorPageLoginButton
from pages.Elements.HeaderCFDCalculatorPageSignUpButton import HeaderCFDCalculatorPageSignUpButton
from pages.Elements.CFDCalculatorBlockSignUpButton import CFDCalculatorBlockSignUpButton
from pages.Elements.TradingCalculatorTradeNowButton import TradingCalculatorTradeNowButton
from pages.common import Common
from tests.build_dynamic_arg import build_dynamic_arg_v4
from pages.conditions import Conditions
from src.src import CapitalComPageSrc


@pytest.mark.us_01_09_00
class TestCFDCalculator:
    page_conditions = None

    @allure.step("Start test of button [Sign up] in the 'Header'")
    @pytest.mark.test_001
    def test_001_header_sign_up_button(
            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):
        """
        Check: Button [Sign up] in the 'Header'
        Language: EN. License: All,except FCA.
        Role: All, except “Authorized user”
        """
        bid = build_dynamic_arg_v4(
            d, worker_id, cur_language, cur_country, cur_role,
            "01.09", "Markets > Menu item [CFD Calculator]",
            ".00_001", "Testing button [Sign up] in the 'Header'")

        Common().check_country_in_list_and_skip_if_present(cur_country, ["gb"])
        Common().check_language_in_list_and_skip_if_not_present(cur_language, ["en"])
        Common().check_role_in_list_and_skip_if_present(cur_role, ["Auth"])

        page_conditions = Conditions(d, "")
        cur_item_link = page_conditions.preconditions(
            d, CapitalComPageSrc.URL, "", cur_language, cur_country, cur_role, cur_login, cur_password)

        test_element = HeaderCFDCalculatorPageSignUpButton(d, cur_item_link, bid)
        test_element.full_test(self, d, cur_language, cur_country, cur_role, cur_item_link)

    @allure.step("Start test of button [Log in] in the 'Header'")
    @pytest.mark.test_002
    def test_002_header_login_button(
            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):
        """
        Check: Button [Log in] in the 'Header'
        Language: EN. License: All,except FCA.
        Role: All, except “Authorized user”
        """
        bid = build_dynamic_arg_v4(
            d, worker_id, cur_language, cur_country, cur_role,
            "01.09", "Markets > Menu item [CFD Calculator]",
            ".00_002", "Testing button [Log in] in the 'Header'")

        Common().check_country_in_list_and_skip_if_present(cur_country, ["gb"])
        Common().check_language_in_list_and_skip_if_not_present(cur_language, ["en"])
        Common().check_role_in_list_and_skip_if_present(cur_role, ["Auth"])

        page_conditions = Conditions(d, "")
        cur_item_link = page_conditions.preconditions(
            d, CapitalComPageSrc.URL, "", cur_language, cur_country, cur_role, cur_login, cur_password)

        test_element = HeaderCFDCalculatorPageLoginButton(d, cur_item_link, bid)
        test_element.full_test(self, d, cur_language, cur_country, cur_role, cur_item_link)

    @allure.step("Start test of button [Sign up] in the 'Block CFD Calculator'")
    @pytest.mark.test_003
    def test_003_block_cfd_calculator_signup_button(
            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):
        """
        Check: Button [Sign up] in the 'Block CFD Calculator'
        Language: EN. License: All,except FCA.
        Role: All
        """
        bid = build_dynamic_arg_v4(
            d, worker_id, cur_language, cur_country, cur_role,
            "01.09", "Markets > Menu item [CFD Calculator]",
            ".00_003", "Testing button [Sign up] in the 'Block CFD Calculator'")

        Common().check_country_in_list_and_skip_if_present(cur_country, ["gb"])
        Common().check_language_in_list_and_skip_if_not_present(cur_language, ["en"])

        page_conditions = Conditions(d, "")
        cur_item_link = page_conditions.preconditions(
            d, CapitalComPageSrc.URL, "", cur_language, cur_country, cur_role, cur_login, cur_password)

        test_element = CFDCalculatorBlockSignUpButton(d, cur_item_link, bid)
        test_element.full_test_with_tpi(self, d, cur_language, cur_country, cur_role, cur_item_link)

    @allure.step("Start test of button [Trade Now] in the 'Trading calculator' Block")
    @pytest.mark.test_005
    def test_005_block_trading_calculator_trade_now_button(
            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password, cur_item_link):
        """
        Check: Button [Trade Now] in the 'Trading calculator' Block
        Language: EN. License: All,except FCA.
        """
        bid = build_dynamic_arg_v4(
            d, worker_id, cur_language, cur_country, cur_role,
            "01.09", "Markets > Menu item [CFD Calculator]",
            ".00_005", "Testing button [Trade Now] in the 'Trading calculator' Block")

        Common().check_country_in_list_and_skip_if_present(cur_country, ["gb"])
        Common().check_language_in_list_and_skip_if_not_present(cur_language, ["en"])

        page_conditions = Conditions(d, "")
        page_conditions.preconditions(
            d, CapitalComPageSrc.URL, "", cur_language, cur_country, cur_role, cur_login, cur_password)

        test_element = TradingCalculatorTradeNowButton(d, cur_item_link, bid)
        test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_item_link)

##################################################################################################

# HeaderCFDCalculatorPageSignUpButton

"""
-*- coding: utf-8 -*-
@Time    : 2023/04/17 21:30
@Author  : Mila Podchasova
"""
from datetime import datetime
import pytest
import allure

from pages.Elements.AssertClass import AssertClass
from pages.Signup_login.signup_login import SignupLogin
from pages.base_page import BasePage
from pages.Markets.markets_locators import HeaderElementLocators
from selenium.common.exceptions import ElementClickInterceptedException


class HeaderCFDCalculatorPageSignUpButton(BasePage):

    @allure.step(f"{datetime.now()}  Start Full test for 'Sign Up' button of Header")
    def full_test(self, d, cur_language, cur_country, cur_role, cur_item_link):
        self.arrange_(d, cur_item_link)
        self.element_click(d)

        test_element = AssertClass(d, cur_item_link, self.bid)

        match cur_role:
            case "NoReg" | "NoAuth":
                test_element.assert_signup(d, cur_language, cur_item_link)

    def arrange_(self, d, cur_item_link):
        print(f"\n{datetime.now()}   1. Arrange_v0")

        if not self.current_page_is(cur_item_link):
            self.link = cur_item_link
            self.open_page()

        button_list = self.driver.find_elements(*HeaderElementLocators.BUTTON_SIGNUP)
        if len(button_list) == 0:
            print(f"{datetime.now()}   => BUTTON_SIGNUP is not present on this page")
            del button_list
            pytest.fail("Testing element BUTTON_SIGNUP on the 'Header' is not present on this page")
        else:
            print(f"{datetime.now()}   => BUTTON_SIGNUP is present on this page")

        print(f"{datetime.now()}   BUTTON_SIGNUP scroll =>")
        self.driver.execute_script(
            'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});', button_list[0]
        )

        print(f"{datetime.now()}   BUTTON_SIGNUP is visible? =>")
        if self.element_is_visible(HeaderElementLocators.BUTTON_SIGNUP):
            print(f"{datetime.now()}   => BUTTON_SIGNUP is visible on this page")
        else:
            print(f"{datetime.now()}   => BUTTON_SIGNUP is not visible on this page")
            pytest.fail("Bug! Testing element 'BUTTON_SIGNUP on the 'Header' is present on this page, "
                        "but not visible")

    @allure.step("Click button [Sign Up] on 'Header'")
    def element_click(self):
        print(f"\n{datetime.now()}   2. Act_v0")

        button_list = self.driver.find_elements(*HeaderElementLocators.BUTTON_SIGNUP)
        print(f"{datetime.now()}   BUTTON_SIGNUP is clickable? =>")
        time_out = 3
        if not self.element_is_clickable(button_list[0], time_out):
            print(f"{datetime.now()}   => BUTTON_SIGNUP is not clickable after {time_out} sec. Stop TC>")
            pytest.fail(f"BUTTON_SIGNUP is not clickable after {time_out} sec.")

        try:
            self.driver.execute_script("arguments[0].click();", button_list[0])
            print(f"{datetime.now()}   => BUTTON_SIGNUP clicked!")
        except ElementClickInterceptedException:
            print(f"{datetime.now()}   => BUTTON_SIGNUP NOT CLICKED")
            print(f"{datetime.now()}   'Sign up' form or page is auto opened")

            page_ = SignupLogin(self.driver)
            if page_.close_signup_form():
                pass
            else:
                page_.close_signup_page()

            self.driver.execute_script("arguments[0].click();", button_list[0])
            del page_

        del button_list
        return True

##############################################################################################################

"""
-*- coding: utf-8 -*-
@Time    : 2023/04/18 19:30
@Author  : Mila Podchasova
"""

from datetime import datetime
import pytest
import allure

from pages.Elements.AssertClass import AssertClass
from pages.Signup_login.signup_login import SignupLogin
from pages.Markets.markets_locators import HeaderElementLocators
from pages.base_page import BasePage
from selenium.common.exceptions import ElementClickInterceptedException


class HeaderCFDCalculatorPageLoginButton(BasePage):

    @allure.step(f"{datetime.now()}  Start Full test for 'Log In' button of Header")
    def full_test(self, d, cur_language, cur_country, cur_role, cur_item_link):
        self.arrange_(d, cur_item_link)
        self.element_click(d)

        test_element = AssertClass(d, cur_item_link, self.bid)

        match cur_role:
            case "NoReg" | "NoAuth":
                test_element.assert_login(d, cur_language, cur_item_link)

    def arrange_(self, d, cur_item_link):
        print(f"\n{datetime.now()}   1. Arrange_v0")

        if not self.current_page_is(cur_item_link):
            self.link = cur_item_link
            self.open_page()

        button_list = self.driver.find_elements(*HeaderElementLocators.BUTTON_LOGIN)
        if len(button_list) == 0:
            print(f"{datetime.now()}   => BUTTON_LOGIN is not present on this page")
            del button_list
            pytest.fail("Testing element BUTTON_LOGIN on the 'Header' is not present on this page")
        else:
            print(f"{datetime.now()}   => BUTTON_LOGIN is present on this page")

        print(f"{datetime.now()}   BUTTON_LOGIN scroll =>")
        self.driver.execute_script(
            'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});', button_list[0]
        )

        print(f"{datetime.now()}   BUTTON_LOGIN is visible? =>")
        if self.element_is_visible(HeaderElementLocators.BUTTON_LOGIN):
            print(f"{datetime.now()}   => BUTTON_LOGIN is visible on this page")
        else:
            print(f"{datetime.now()}   => BUTTON_LOGIN is not visible on this page")
            pytest.fail("Bug! Testing element 'BUTTON_LOGIN on the 'Header' is present on this page, "
                        "but not visible")

    @allure.step("Click button [Log In] on 'Header'")
    def element_click(self):
        print(f"\n{datetime.now()}   2. Act_v0")

        button_list = self.driver.find_elements(*HeaderElementLocators.BUTTON_LOGIN)
        print(f"{datetime.now()}   BUTTON_LOGIN is clickable? =>")
        time_out = 3
        if not self.element_is_clickable(button_list[0], time_out):
            print(f"{datetime.now()}   => BUTTON_LOGIN is not clickable after {time_out} sec. Stop TC>")
            pytest.fail(f"BUTTON_LOGIN is not clickable after {time_out} sec.")

        try:
            self.driver.execute_script("arguments[0].click();", button_list[0])
            print(f"{datetime.now()}   => BUTTON_LOGIN clicked!")
        except ElementClickInterceptedException:
            print(f"{datetime.now()}   => BUTTON_LOGIN NOT CLICKED")
            print(f"{datetime.now()}   'Log In' form or page is auto opened")

            page_ = SignupLogin(self.driver)
            if page_.close_login_form():
                pass
            else:
                page_.close_login_page()

            self.driver.execute_script("arguments[0].click();", button_list[0])
            del page_

        del button_list
        return True


#######################################################################################################


"""
-*- coding: utf-8 -*-
@Time    : 2023/04/21 19:30
@Author  : Mila Podchasova
"""
from datetime import datetime
import pytest
import allure

from pages.Elements.AssertClass import AssertClass
from pages.Signup_login.signup_login import SignupLogin
from pages.base_page import BasePage
from pages.Markets.markets_locators import BlockCFDCalculator
from selenium.common.exceptions import ElementClickInterceptedException


class CFDCalculatorBlockSignUpButton(BasePage):

    @allure.step(f"{datetime.now()}  Start Full test for 'Sign Up' button on 'Block CFD Calculator'")
    def full_test_with_tpi(self, d, cur_language, cur_country, cur_role, cur_item_link):
        self.arrange_(d, cur_item_link)
        self.element_click(d)

        test_element = AssertClass(d, cur_item_link, self.bid)

        match cur_role:
            case "NoReg" | "NoAuth":
                test_element.assert_signup(d, cur_language, cur_item_link)
            case "Auth":
                test_element.assert_trading_platform_v4(d, cur_item_link)

    def arrange_(self, d, cur_item_link):
        print(f"\n{datetime.now()}   1. Arrange_v0")

        if not self.current_page_is(cur_item_link):
            self.link = cur_item_link
            self.open_page()

        button_list = self.driver.find_elements(*BlockCFDCalculator.BUTTON_SIGNUP)
        if len(button_list) == 0:
            print(f"{datetime.now()}   => BUTTON_SIGNUP is not present on this page")
            del button_list
            pytest.fail("Testing element BUTTON_SIGNUP on 'Block CFD Calculator' is not present on this page")
        else:
            print(f"{datetime.now()}   => BUTTON_SIGNUP is present on this page")

        print(f"{datetime.now()}   BUTTON_SIGNUP scroll =>")
        self.driver.execute_script(
            'return arguments[0].scrollIntoView({block: "center", inline: "nearest"});', button_list[0]
        )

        print(f"{datetime.now()}   BUTTON_SIGNUP is visible? =>")
        if self.element_is_visible(BlockCFDCalculator.BUTTON_SIGNUP):
            print(f"{datetime.now()}   => BUTTON_SIGNUP is visible on this page")
        else:
            print(f"{datetime.now()}   => BUTTON_SIGNUP is not visible on this page")
            pytest.fail("Bug! Testing element BUTTON_SIGNUP on 'Block CFD Calculator' is present on this page, "
                        "but not visible")

    @allure.step("Click button [Sign Up] on 'Block CFD Calculator'")
    def element_click(self):
        print(f"\n{datetime.now()}   2. Act_v0")

        button_list = self.driver.find_elements(*BlockCFDCalculator.BUTTON_SIGNUP)
        print(f"{datetime.now()}   BUTTON_SIGNUP is clickable? =>")
        time_out = 3
        if not self.element_is_clickable(button_list[0], time_out):
            print(f"{datetime.now()}   => BUTTON_SIGNUP is not clickable after {time_out} sec. Stop TC>")
            pytest.fail(f"BUTTON_SIGNUP is not clickable after {time_out} sec.")

        try:
            self.driver.execute_script("arguments[0].click();", button_list[0])
            print(f"{datetime.now()}   => BUTTON_SIGNUP clicked!")
        except ElementClickInterceptedException:
            print(f"{datetime.now()}   => BUTTON_SIGNUP NOT CLICKED")
            print(f"{datetime.now()}   'Sign up' form or page is auto opened")

            page_ = SignupLogin(self.driver)
            if page_.close_signup_form():
                pass
            else:
                page_.close_signup_page()

            self.driver.execute_script("arguments[0].click();", button_list[0])
            del page_

        del button_list
        return True

#######################################################################################################

# 71 - 75 

## markets_locators.py


class BlockCFDCalculator:
    BUTTON_SIGNUP = (By.CSS_SELECTOR, "div.row-cont a[data-type='hp_banner_default1']")
    BUTTON_TRY_FREE_DEMO = (By.CSS_SELECTOR, "div.row-cont a[data-type='hp_banner_demo_11']")

